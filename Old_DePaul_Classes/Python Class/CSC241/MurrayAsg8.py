## Logan Murray## No Collaboraters## WARNING: missing docstrings and missing comments will lose points## Question 1def inversions(s):    pass    # Question 2def decVal(n):    rtnLst=[]    lst=[]    try:        if n>=1:            while n>0:                n=round(n,2)-0.31                lst.append(n)            rtnLst.append(len(lst))            rtnLst.append(lst[-2])            rtnLst.append(lst[-1])        else:            print("n must be greater than or equal to 1")    except TypeError:        print("n be a number and greater than 1")    return rtnLst                                    # Question 3def letter2Number(grade):    d=[['A',4.0],['B',3.0],['C',2.0],['D',1.0],['F',0]] # leave this here    pass        if __name__ == "__main__":    def check(output, expected):        if output != expected:            return "FAILED!"        else:            return "PASSED!"    print("RUNNING CHECK ...")    print('inversions("ABBFHDL"): ' + check(inversions('ABBFHDL'),2))    print('inversions("ABCD"): ' + check(inversions('ABCD'),0))    print('inversions("CDBA"): ' + check(inversions('CDBA'),5))    print('inversions("DCBA"): ' + check(inversions('DCBA'),6))    print('inversions(""): ' + check(inversions(''),0))    print()    print('letter2Number("A-"): ' + check(letter2Number('A-'),3.7))    print('letter2Number("c+"): ' + check(letter2Number('c+'),2.3))    print('letter2Number("f"): ' + check(letter2Number('f'),0))    print('letter2Number("x"): ' + check(letter2Number('x'),'unknown grade'))    print()    print('decVal(3.1): ' + check(decVal(3.1),[9, 0.62, 0.31]))    print('decVal(1): ' + check(decVal(1),[3, 0.38, 0.07]))    print('decVal("a"): ' + check(decVal('a'),'n must be numeric'))    print('decVal(0): ' + check(decVal(0),'n must be greater than or equal to 1'))